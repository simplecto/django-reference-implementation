name: Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

permissions:
  contents: write
  id-token: write

jobs:
  test:
    uses: ./.github/workflows/test.yml

  ruff:
    uses: ./.github/workflows/ruff.yml

  release:
    runs-on: ubuntu-latest
    needs: [test, ruff]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: uv sync --extra dev

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version and create changelog
        run: |
          uv run cz bump --increment ${{ inputs.release_type }} --yes
          echo "NEW_VERSION=$(uv run cz version --project)" >> $GITHUB_ENV

      - name: Push changes and tags
        run: |
          git push origin master
          git push origin --tags

      - name: Extract latest changelog entry
        run: |
          # Extract the latest release notes from CHANGELOG.md
          sed -n '/^## v${{ env.NEW_VERSION }}/,/^## /p' CHANGELOG.md | sed '$d' > RELEASE_NOTES.md
          # If extraction failed, use a fallback message
          if [ ! -s RELEASE_NOTES.md ]; then
            echo "## v${{ env.NEW_VERSION }}" > RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            echo "Release v${{ env.NEW_VERSION }}" >> RELEASE_NOTES.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.NEW_VERSION }}
          body_path: RELEASE_NOTES.md
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release summary
        run: |
          echo "üöÄ Release v${{ env.NEW_VERSION }} completed successfully!"
          echo "üìù Release notes: https://github.com/${{ github.repository }}/releases/tag/v${{ env.NEW_VERSION }}"
